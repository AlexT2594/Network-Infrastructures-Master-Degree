/etc/init.d/networking restart
/etc/init.d/quagga restart
/etc/init.d/dhcp3-server start
/etc/init.d/ssh restart
mkdir /home/c_user
useradd c_user -d /home/c_user
chown c_user:c_user /home/c_user
echo -e 'user\nuser\n' | passwd c_user
mkdir /home/c_user/.ssh
chown c_user:c_user /home/c_user/.ssh
chmod 700 /home/c_user/.ssh
touch /home/c_user/.ssh/authorized_keys
chown c_user:c_user /home/c_user/.ssh/authorized_keys
chmod 600 /home/c_user/.ssh/authorized_keys
while [ ! -f /hostlab/id_rsa.pub ]
do
	sleep 1
done

cat /hostlab/id_rsa.pub > /home/c_user/.ssh/authorized_keys

iptables -P FORWARD DROP

# Because of PREROUTING we can't distinguish between packets meant for r7
# or packets meant for pc7 so we mark those that have destination r7 before
# doing the actual NAT operation. The marked ones are the right ones.

# Doing only the NAT operation will not allow packets to return to the requester
# since it would have pc7 as destination and not r7. This results in the
# requestor dropping the packet since it doesn't have the expected source, therefore
# we masquerade those packets.

iptables -t mangle -A PREROUTING -d 192.168.2.1 -p tcp --dport 80 -j MARK --set-mark 0xdeadbeef
iptables -t nat -A PREROUTING -d 192.168.2.1 -p tcp --dport 80 -j DNAT --to-destination 192.168.2.8:8080
iptables -t nat -A POSTROUTING -o eth1 -p tcp --sport 80 -j MASQUERADE

iptables -A FORWARD -s 192.168.2.0/24 -j ACCEPT 
iptables -A FORWARD -d 192.168.2.5 -j ACCEPT
#iptables -A FORWARD -p tcp --sport 22 -j ACCEPT
#iptables -A FORWARD -p tcp --dport 22 -j ACCEPT
iptables -A FORWARD -p udp --sport 1194 -j ACCEPT
iptables -A FORWARD -p udp --dport 1194 -j ACCEPT
iptables -A FORWARD -m mark --mark 0xdeadbeef -j ACCEPT
iptables -A FORWARD -d 192.168.2.0/24 -m state --state ESTABLISHED,RELATED -j ACCEPT
